package com.bak.demos.spring.security.jdbc.password.encoder.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import javax.sql.DataSource;

@EnableWebSecurity
public class WebSecurityConfigurationJDBC extends WebSecurityConfigurerAdapter {

    @Autowired
    DataSource dataSource;

    //If we autowire and creating the bean in the same class, getting cyclic dependency issue.
    BCryptPasswordEncoder encoder;

    @Bean
    public BCryptPasswordEncoder getBCryptPasswordEncoder() {
        encoder = new BCryptPasswordEncoder();
        return encoder;
    }


    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {

        String anilPwd = encoder.encode("anil");
        String bandariPwd = encoder.encode("bandari");

        System.out.println("*************** anilPwd:  " + anilPwd);
        System.out.println("*************** bandariPwd:  " + bandariPwd);



        /*To use the spring generated default schema*/
//        auth.jdbcAuthentication()
//                .dataSource(dataSource)
//                .withDefaultSchema()
//                .withUser(User.withUsername("anil").password("anil").roles("USER"))
//                .withUser(User.withUsername("bandari").password("bandari").roles("USER", "ADMIN"));

        /*To use the custom schema generated by schema.sql and data.sql files in resource folder
        Required Users and Authorities tables only*/
        auth.jdbcAuthentication().dataSource(dataSource).passwordEncoder(encoder);

        /*To user any custom tables schema, not required Users and Authorities tables*/
//        auth.jdbcAuthentication().dataSource(dataSource)
//                .usersByUsernameQuery("SELECT USERNAME,PASSWORD,ENABLED FROM USER_DETAILS WHERE USERNAME=?")
//                .authoritiesByUsernameQuery("SELECT USERNAME,ROLE FROM USER_ROLES WHERE USERNAME=?");


    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
                .antMatchers("/data").permitAll()
                .antMatchers("/user/register").permitAll()
                .antMatchers("/user/get/*").permitAll()
                .antMatchers("/user").hasAnyRole("ADMIN", "USER")
                .antMatchers("/admin").hasRole("ADMIN")
                .anyRequest().authenticated()
                .and().formLogin();
    }

}
